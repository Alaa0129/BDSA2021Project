@layout MainLayout
@page "/MyRequests"
@inject IRequestRemote RequestRemote
@using BlazorApp.Core

<h1>My Requests</h1>
<br> <br>

<div class="Page">
        <form class="form-inline">
            <div class="search-field">
                <input class="form-control mr-sm-2" @bind-value="searchedRequest" @bind-value:event="oninput"
                placeholder="Search for requests..." aria-label="Search">
                <button class="btn btn-light my-sm-0" type="button">Search</button>
            </div>
        </form>

    <br> <br>

    @foreach (var request in filteredRequests) 
    {
        <div class="RequestView" onclick="" style="justify-content: center;">

            <div class="ProjectTitleView">
                <p class="ProjectTitle">
                    @request.Title
                </p>
            </div>
            <div class="ProjectDescriptionView">
                <div class="ProjectDescriptionBox">
                    <p class="ProjectDescription"> @request.Description </p>
                </div>
            </div>
            <div class="LastRowOuter">
                <div class="LastRowInner">
                    <p class="SupervisorName"> @request.StudentId </p>
                    <button type="button" class="ReadMoreButton"> Read more </button>
                </div>
            </div>
        </div>
        <br /><br>

    }

    <div class="pageButtonsDiv">
        <button class="btn btn-secondary" style="cursor:pointer;" @onclick="@(e => NewPage("prev"))"> Previous </button>

        @for (int i = 0; i < totalPages; i++)
        {
            var pageNumber = i;
            <button class="btn btn-info @(currentPage == pageNumber? "btn-dark" : "btn-white")"
            @onclick="@(e => UpdateRequests(pageNumber))"> @(i+1)</button>
        }

        <button class="btn btn-secondary" style="cursor:pointer;" @onclick="@(e => NewPage("next"))"> Next </button>
    </div>
</div>
    


@code
{

    private IEnumerable<RequestDetailsDTO> requests= new List<RequestDetailsDTO>();
    private IEnumerable<RequestDetailsDTO> filteredRequests = new List<RequestDetailsDTO>();

        
    private int pageSize = 5;
    private int totalPages;
    private int currentPage;

    private string _searchedRequest;

    public string searchedRequest
    {
        get { return _searchedRequest; }

        set
        {
            _searchedRequest = value;

            SearchRequests();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        requests = await RequestRemote.GetRequests();

        filteredRequests = requests.Take(pageSize);
        
        totalPages = (int)Math.Ceiling(requests.Count() / (decimal)pageSize);
    }

    private void SearchRequests()
    {
        filteredRequests = requests.Where(p => p.Title
                                   .Contains(_searchedRequest, StringComparison.OrdinalIgnoreCase) 
                                            || p.StudentId.ToString()
                                   .Contains(_searchedRequest,StringComparison.OrdinalIgnoreCase));
    }

    private void UpdateRequests(int pageNumber) //shows the requests dependeing on which page the user is
    {
        filteredRequests = requests.Skip(pageNumber * pageSize).Take(pageSize);
        currentPage = pageNumber;

    }

    private void NewPage(string buttonType) //this handles the next and previous buttons when these are clicked on
    {
        if (buttonType == "next" && currentPage != totalPages - 1) currentPage++;

        if (buttonType == "prev" && currentPage != 0) currentPage--;

        UpdateRequests(currentPage);
    }
}
