@layout MainLayout
@page "/MyRequests"
@inject IRequestRemote RequestRemote
@using BlazorApp.Core

<h1>My Requests</h1>
<br> <br>

<div class="row">
    <div class="column">
      
        <div class="mt-3 inputs"> 
            <i class="fa fa-search"></i> 
            <input type="text" class="form-control " placeholder="Search Tasks..."> 
        </div>
      
        <div class="tag-container">
            <button class="content-text grid-tag">Alaaaaaaaaa</button>
            <button class="content-text" id="grid-tag">Shuuuuuuuja</button>
            <button class="content-text" id="grid-tag">Machine Learning</button>
            <button class="content-text" id="grid-tag">SWU</button>
            <button class="content-text" id="grid-tag">Endnu et tag</button>
            <button class="content-text grid-tag">Hej med dig</button>
            <button class="content-text" id="grid-tag">AI</button>
            <button class="content-text" id="grid-tag">DDIT</button>
            <button class="content-text" id="grid-tag">GBI</button>
            <button class="content-text" id="grid-tag">Lagkage</button>
        </div>
    
        @foreach (var request in filteredRequests) 
        {
            <div class="RequestView">
                <h3>@request.Title</h3>
                <div class="ProjectDescriptionView">
                    <p> @request.Description</p>
                </div>
            </div>
            <br /><br>
        }     
    </div>

    <div class="pageButtonsDiv">
        <button class="btn btn-secondary" style="cursor:pointer;" @onclick="@(e => NewPage("prev"))"> Previous </button>

        @for (int i = 0; i < totalPages; i++)
        {
            var pageNumber = i;
            <button class="btn btn-info @(currentPage == pageNumber? "btn-dark" : "btn-white")"
            @onclick="@(e => UpdateRequests(pageNumber))"> @(i+1)</button>
        }

        <button class="btn btn-secondary" style="cursor:pointer;" @onclick="@(e => NewPage("next"))"> Next </button>
    </div>
</div>

@code
{

    private IEnumerable<RequestDetailsDTO> requests= new List<RequestDetailsDTO>();
    private IEnumerable<RequestDetailsDTO> filteredRequests = new List<RequestDetailsDTO>();

        
    private int pageSize = 5;
    private int totalPages;
    private int currentPage;

    private string _searchedRequest;

    public string searchedRequest
    {
        get { return _searchedRequest; }

        set
        {
            _searchedRequest = value;

            SearchRequests();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        requests = await RequestRemote.GetRequests();

        filteredRequests = requests.Take(pageSize);
        
        totalPages = (int)Math.Ceiling(requests.Count() / (decimal)pageSize);
    }

    private void SearchRequests()
    {
        filteredRequests = requests.Where(p => p.Title
                                   .Contains(_searchedRequest, StringComparison.OrdinalIgnoreCase) 
                                            || p.StudentId.ToString()
                                   .Contains(_searchedRequest,StringComparison.OrdinalIgnoreCase));
    }

    private void UpdateRequests(int pageNumber) //shows the requests dependeing on which page the user is
    {
        filteredRequests = requests.Skip(pageNumber * pageSize).Take(pageSize);
        currentPage = pageNumber;

    }

    private void NewPage(string buttonType) //this handles the next and previous buttons when these are clicked on
    {
        if (buttonType == "next" && currentPage != totalPages - 1) currentPage++;

        if (buttonType == "prev" && currentPage != 0) currentPage--;

        UpdateRequests(currentPage);
    }
}




@* 
    <div class="ProjectTitleView">
                    <p class="ProjectTitle">
                    @request.Title
                    </p>
                </div>
            
                <div class="ProjectDescriptionView">
                    <div class="ProjectDescriptionBox">
                    <p class="ProjectDescription"> @request.Description </p>
                    </div>
                </div>
            
                <div class="LastRowOuter">
                    <div class="LastRowInner">
                    <p class="SupervisorName"> @request.StudentId </p>
                    <button type="button" class="ReadMoreButton"> Read more </button>
                    </div>
                </div>
*@