@page "/ProjectRemoteTest"
@attribute [Authorize]


@using BlazorApp.Core
@using System.Collections.Generic;
@using Microsoft.Identity.Web;
@inject ProjectRemote ProjectRemote
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler



<h1>Project Remote Test </h1>

<h3>The text below shows the data of the first project in the database using the ProjectRemote.GetProject:</h3>
@if (@projectDetailsDTO != null)
{
    <li> Title: @projectDetailsDTO.Title </li>
    <li> Description: @projectDetailsDTO.Description </li>
    <li> Amount of Applied Students: @projectDetailsDTO.AppliedStudents.Count </li>
    <li> Supervisor Name: @projectDetailsDTO.Supervisor.Name </li>
    <li> Supervisor Id: @projectDetailsDTO.Supervisor.Id </li>
}

@if (@projectDetails != null)
{
    foreach (ProjectDetailsDTO project in projectDetails)
    {
        <li> Title: @project.Title</li>
        <li> Description: @project.Description</li>
    }
    <h1> @projectDetails.Count() </h1>
}

<h3>This will update the project with different values using ProjectRmeote.UpdateProject (A refresh is needed, as of now)</h3>
<button @onclick="@UpdateProject">
    Click Me
</button>



@code {

    ProjectDetailsDTO projectDetailsDTO = null;
    IEnumerable<ProjectDetailsDTO> projectDetails = null;

    ProjectUpdateDTO projectUpdateDTO1 = new ProjectUpdateDTO{Id = 1, Title = "I Updated", Description = "This also updated"};
    ProjectUpdateDTO projectUpdateDTO2 = new ProjectUpdateDTO{Id = 1, Title = "I Updated Again", Description = "This is also updated again"};


    protected override async Task OnInitializedAsync()
    {
        projectDetailsDTO = await ProjectRemote.GetProject(1);
        projectDetails = await ProjectRemote.GetProjects();
    }

    protected async void UpdateProject()
    {
        try
        {
            if (projectDetailsDTO.Title.Equals("I Updated")) await ProjectRemote.UpdateProject(projectUpdateDTO2);
            else await ProjectRemote.UpdateProject(projectUpdateDTO1);
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }


    }
}