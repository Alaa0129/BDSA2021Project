@layout MainLayout
@page "/"
@inject IProjectRemote ProjectRemote
@using BlazorApp.Core
@inject ITagRemote TagRemote;

<h1>Main page</h1>
<br>

<div class="row">
    <div class="column">
      
        <div class="main-search-input fl-wrap inputs">
            <div class="main-search-input-item"> 
                <input type="search" @bind="searchedProject" placeholder="Search Projects..."> 
            </div> 
            <button class="main-search-button" onclick="SearchProjects()">Search</button>
        </div>

        <div class="tag-container">
            @foreach (var tag in tags)
            { 
                
                    <label>
                        <input class="tagInput" type="checkbox" @onclick="@(e => SearchProjectsByTagName(tag.Name))">
                        <span class="tag">@(tag.Name)</span>
                    </label>
                    tagNames.Add(tag.Name);
                
            }
        </div>

        @foreach (var project in filteredProjects) 
        {
            <div class="ProjectView">
                <h3>@project.Title</h3>
                <div class="ProjectDescriptionView">
                    <span class="description">@project.Description</span>
                </div>
                <div class="Project-bottom">
                    <div class="student-profile">
                        <img class="profile-img" src="Resources\profile-icon.svg">
                        <h5>@project.SupervisorId</h5>
                    </div>
                    <button class="read-more" onclick="location.href = 'ProjectDetailsPage';">Read more</button>
                </div>
            </div>
        }

        <div class="pageButtonsDiv">
            <button class="btn btn-dark" @onclick="@(e => NewPage("prev"))"> Previous </button>

            @for (int i = 0; i < totalPages; i++)
            {
                var pageNumber = i;
                <button class="btn btn-info @(currentPage == pageNumber? "btn-white" : "btn-dark")"
                @onclick="@(e => UpdateProjects(pageNumber))"> @(i+1)</button>
            }

            <button class="btn btn-dark" @onclick="@(e => NewPage("next"))"> Next </button>
        </div>
    </div>
</div>


@code
{

    private IEnumerable<TagDetailsDTO> tags = new List<TagDetailsDTO>();    
    private List<string> tagNames = new List<string>(); 
    private IEnumerable<ProjectDetailsDTO> projects = new List<ProjectDetailsDTO>();
    private IEnumerable<ProjectDetailsDTO> filteredProjects = new List<ProjectDetailsDTO>();

    private int pageSize = 5;
    private int totalPages;
    private int currentPage;
    private string _searchedProject;

    public string searchedProject
    {
        get { return _searchedProject; }

        set
        {
            _searchedProject = value;

            SearchProjects();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        tags = await TagRemote.GetTags();

        projects = await ProjectRemote.GetProjects();

        filteredProjects = projects.Take(pageSize);

        totalPages = (int)Math.Ceiling(projects.Count() / (decimal)pageSize);
    }

    private void SearchProjects()
    {
        filteredProjects = projects.Where(p => p.Title
        .Contains(_searchedProject, StringComparison.OrdinalIgnoreCase)
            || p.SupervisorId.ToString()
        .Contains(_searchedProject, StringComparison.OrdinalIgnoreCase));
    }

    private void SearchProjectsByTagName(string tagName)
    {
        filteredProjects = projects.Where(p => p.Tags.Any(t => t == tagName));     
        
    }

    private void UpdateProjects(int pageNumber) //shows the projects depending on which page the user is
    {
        filteredProjects = projects.Skip(pageNumber * pageSize).Take(pageSize);
        currentPage = pageNumber;

    }

    private void NewPage(string buttonType) //this handles the next and previous buttons when these are clicked on
    {
        if (buttonType == "next" && currentPage != totalPages - 1) currentPage++;

        if (buttonType == "prev" && currentPage != 0) currentPage--;

        UpdateProjects(currentPage);
    }

     private bool tagExists(string tagName) //remove later when handling case in create project
    {
        return tagNames.Contains(tagName);
    }
}
