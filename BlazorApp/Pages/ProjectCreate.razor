@page "/project/create/{requestId:int?}"
@attribute [Authorize(Roles = "Supervisor")]

@using BlazorApp.Core
@using static CurrieTechnologies.Razor.SweetAlert2.SweetAlertIcon
@using Microsoft.Identity.Web
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProjectRemote ProjectRemote
@inject RequestRemote RequestRemote
@inject TagRemote TagRemote
@inject NavigationManager navManager
@inject CurrieTechnologies.Razor.SweetAlert2.SweetAlertService swal
@inject IJSRuntime js

<h1>Create a new project </h1>
<br> <br />

<form class="MainDiv">
    <div class="form-group">
        <input @bind="Title" @bind:event="oninput" type="text" class="form-control" id="formGroupExampleInput1"
            placeholder="Project Title">
    </div>
    <div class="form-group">
        <textarea @bind="Description" @bind:event="oninput" type="text" style="height: 200px;" class="form-control"
            id="formGroupExampleInput2" placeholder="Project Description" rows="20"></textarea>
    </div>
    <div class="form-group">
        <textarea type="text" style="height: 120px;" class="form-control" id="formGroupExampleInput"
            placeholder="Additional information" rows="10"></textarea>
    </div>
</form>

<div class="allTags">
    <div class="preDefinedTags">

        @foreach (var tag in displayTags)
        {
            var tagId = "tag" + tagNr.ToString();
            tagNr++;
            <button @onclick="@(e => AddTagName(tagId,tag))" id="@tagId" type="button" class="btn btn-primary">@tag</button>

        }

    </div>


    <div class="addDivTag">
        <input onkeyup="if(event.keyCode===13){addTag.click()}" @bind="tagName" @bind:event="oninput"
            id="AddTagTextField" class="form-control tagTextField" placeholder="Enter Tag">
        <button id="addTag" @onclick="@(e => AddTag(tagName))" type="button" class="btn btn-primary btn-rounded">Add
            Tag</button>
    </div>
</div>

<br> <br />

<div class="Buttons">
    <button type="button" class="btn btn-success successBtn"
        @onclick="@(e => Submit(Title, Description))">Submit</button>
</div>


@code
{
    private string Title;
    private string Description;
    private string tagName;
    private ClaimsPrincipal authUser;

    [Parameter]
    public int? requestId { get; set; }

    private int tagNr = 5; //to keep track of tag IDs
    IEnumerable<TagDetailsDTO> tags = new List<TagDetailsDTO>(); //tags fetched from API
    List<string> displayTags = new List<string>(); //the tags to display on the page
    List<string> tagNames = new List<string>(); //responsible for holding tag names which are clicked on


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        authUser = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User; 

        tags = await TagRemote.GetTags();
    }

    // Is used when a supervisor will create a project from a request
    // Passing said request's Id in the url and then automatically setting predefined values to the inputs.
    // As the parameter is nullable this only happens if a parameter is passed to the url
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var requestDetails = await RequestRemote.GetRequest((int)requestId);
            if (requestId != null)
            {
                Title = requestDetails.Title;
                Description = requestDetails.Description;
            }
        }
        catch (System.Exception)
        {

        }


    }

    private async void Submit(string Title, string Description)
    {
        ProjectCreateDTO projectCreateDTO = new ProjectCreateDTO()
        {
            Title = Title,
            Description = Description,
            SupervisorId = authUser.GetObjectId(),
            Tags = tagNames

        };

        await js.InvokeVoidAsync("clearProjectForm");

        var result = await ProjectRemote.CreateProject(projectCreateDTO);

        if (result)
        {
            await swal.FireAsync("Succes", "Project successfully created", Success);
            navManager.NavigateTo("/");
        }

        else
        {
            await swal.FireAsync("Error", "Couldn't create project", Error);
        }

    }

    private async void AddTag(string tagName)
    {
        if (string.IsNullOrEmpty(tagName)) return;
        displayTags.Add(tagName);
        await js.InvokeVoidAsync("clearTagTextField");
    }


    private async void AddTagName(string id, string tagName)
    {
        await js.InvokeVoidAsync("changeTagColor", id); //Changes color of tag upon click

        var foundTag = tagNames.Where(t => t == tagName).FirstOrDefault();

        if (foundTag == null)
        {
            tagNames.Add(tagName);
            return;
        }

        tagNames.Remove(tagName);

    }
}
